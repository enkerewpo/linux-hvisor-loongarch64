#!/bin/bash
set -e

ARCH=loongarch
CROSS_COMPILE=loongarch64-unknown-linux-gnu-

print_available_versions() {
    echo "Available versions to set in the ./chosen file:"
    # dump all the dirname with linux-*
    cnt=0
    for dir in $(ls -d linux-*); do
        if [ -d "$dir" ]; then
            # get the suffix of the directory
            suffix=${dir#linux-}
            cnt=$((cnt + 1))
            echo "$cnt) $suffix"
        fi
    done
}

# if chosen file is not present, print error and exit
if [ ! -f chosen ]; then
    echo "Error: chosen file not found. Please set the kernel version suffix in the chosen file."
    print_available_versions
    exit 1
fi

CHOSEN=$(cat chosen)

check_chosen() {
    if [ ! -d "linux-$1" ]; then
        echo "Error: linux-$1 directory not found. Please set the kernel version suffix in the chosen file."
        print_available_versions
        exit 1
    fi
}

# check if linux-$CHOSEN directory exists
check_chosen $CHOSEN
echo "Chosen linux source: linux-$CHOSEN"

# first we recursively clone all submodules
init_submodules() {
    echo "Initializing submodules"
    git submodule update --init --recursive
    echo "======================================================================="
    echo "Submodules:"
    git submodule status
    echo "======================================================================="
}

init_submodules

# set to your LLVM installation path, linux require clang 18+ to build
LLVM=1
LLVM_HOME=/opt/clang+llvm-18.1.8-x86_64-linux-gnu-ubuntu-18.04/bin
CLANG=$LLVM_HOME/clang
LLD=$LLVM_HOME/ld.lld
LLVM_OBJCOPY=$LLVM_HOME/llvm-objcopy
LLVM_READELF=$LLVM_HOME/llvm-readelf

GNU_OBJCOPY=loongarch64-unknown-linux-gnu-objcopy
GNU_READELF=loongarch64-unknown-linux-gnu-readelf
GNU_OBJDUMP=loongarch64-unknown-linux-gnu-objdump

NUM_JOBS=$(nproc)

TARGET_DEFCONFIG=loongson3_root_defconfig
NONROOT_TARGET_DEFCONFIG=loongson3_nonroot_defconfig

LINUX_SRC_DIR=$(realpath linux-$CHOSEN)

# set the LLVM=1 one if you want to use clang to build the kernel

# ARGS="-C $LINUX_SRC_DIR ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE LLVM=$LLVM CC=$CLANG LD=$LLD OBJCOPY=$OBJCOPY READELF=$GNU_READELF"
ARGS="-C $LINUX_SRC_DIR ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE"

WORKDIR=$(dirname "$LINUX_SRC_DIR")
FLAG="$WORKDIR/.flag"

show_help() {
    cat <<EOF
Commands:
    help                - Show this help
    def                 - Run defconfig
    nonroot_def         - Run nonroot defconfig
    clean               - Clean the build
    menuconfig          - Run menuconfig
    save                - Save defconfig
    nonroot_save        - Save nonroot defconfig
    kernel              - Build kernel (default root mode)
    nonroot             - Setup & build nonroot version
    rootfs              - Build rootfs
EOF
    exit 0
}

cp_nonroot() {
    echo "Copying vmlinux.bin to $WORKDIR/nr_tmp"
    rm -rf "$WORKDIR/nr_tmp"
    mkdir "$WORKDIR/nr_tmp"
    cp "$LINUX_SRC_DIR/arch/$ARCH/boot/vmlinux.bin" "$WORKDIR/nr_tmp/vmlinux.bin"
    cp "$LINUX_SRC_DIR/vmlinux" "$WORKDIR/nr_tmp/vmlinux"
    $GNU_READELF -a "$WORKDIR/nr_tmp/vmlinux" >"$WORKDIR/nr_tmp/vmlinux.readelf.txt"
}

build_kernel() {
    if [ ! -f "$FLAG" ]; then
        echo "Please run defconfig or nonroot_def first"
        exit 1
    fi
    echo "Building kernel with LLVM=$LLVM, NUM_JOBS=$NUM_JOBS, ARGS=\"$ARGS\""
    echo ""
    make $ARGS -j$NUM_JOBS
    echo "Running readelf"
    $GNU_READELF -a "$LINUX_SRC_DIR/vmlinux" >"$LINUX_SRC_DIR/vmlinux.readelf.txt"
    $GNU_OBJDUMP -d "$LINUX_SRC_DIR/vmlinux" >"$LINUX_SRC_DIR/vmlinux.asm"
    echo "Generating compile_commands.json"
    cd "$LINUX_SRC_DIR"
    python3 scripts/clang-tools/gen_compile_commands.py
    cd ..
    echo "Done"
}

setup_nonroot_rootfs() {
    local ROOTFS_DIR="$WORKDIR/rootfs"
    local TMPROOT="$ROOTFS_DIR/nonroot_tmproot"

    echo "Setting up nonroot rootfs"
    cp "$ROOTFS_DIR/buildroot/rootfs.cpio.gz" "$ROOTFS_DIR/nonroot_tmproot.cpio.gz"
    gzip -d "$ROOTFS_DIR/nonroot_tmproot.cpio.gz" -f
    sudo rm -rf "$TMPROOT"
    sudo mkdir "$TMPROOT"
    cd "$TMPROOT"
    sudo cpio -id <"$ROOTFS_DIR/nonroot_tmproot.cpio"
    sudo rm -rf tool *.sh
    sudo cp "$ROOTFS_DIR/nonroot_profile" etc/profile
    sudo cp "$ROOTFS_DIR/my_init/init" bin/wsh
    sudo find . | cpio -o -H newc | gzip -9 >"$ROOTFS_DIR/nonroot_fs.cpio.gz"
    echo "Rootfs setup complete"
}

[ "$1" = "" ] || [ "$1" = "help" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ] && show_help

case "$1" in
def)
    echo "Running defconfig"
    make $ARGS $TARGET_DEFCONFIG
    echo "ROOT" >"$FLAG"
    ;;
nonroot_def)
    echo "Running nonroot defconfig"
    make $ARGS $NONROOT_TARGET_DEFCONFIG
    echo "NONROOT" >"$FLAG"
    ;;
nonroot)
    setup_nonroot_rootfs
    make $ARGS $NONROOT_TARGET_DEFCONFIG
    echo "NONROOT" >"$FLAG"
    build_kernel
    cp_nonroot
    ;;
clean)
    echo "Cleaning the build"
    make $ARGS clean
    ;;
menuconfig)
    echo "Running menuconfig"
    make $ARGS menuconfig
    ;;
rootfs)
    echo "Building rootfs"
    cd "$WORKDIR/rootfs"
    make
    ;;
save)
    echo "Saving defconfig"
    cp "$LINUX_SRC_DIR/.config" "$LINUX_SRC_DIR/arch/$ARCH/configs/$TARGET_DEFCONFIG"
    ;;
nonroot_save)
    echo "Saving nonroot defconfig"
    cp "$LINUX_SRC_DIR/.config" "$LINUX_SRC_DIR/arch/$ARCH/configs/$NONROOT_TARGET_DEFCONFIG"
    ;;
kernel)
    build_kernel
    ;;
*)
    echo "Unknown command: $1"
    show_help
    ;;
esac
